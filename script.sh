#!/bin/bash
# version="0.1"
#
# This is an optional arguments-only example of Argbash potential
#
# ARG_OPTIONAL_SINGLE([kind],[k],[kind of bitwarden object],[item])
# ARG_OPTIONAL_SINGLE([name],[n],[name of bitwarden object])
# ARG_OPTIONAL_SINGLE([path],[p],[jsonpath of bitwarden object],[.])
# ARG_HELP([Bitwarden solver of ymlex:])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


# # When called, the process ends.
# Args:
# 	$1: The exit message (print to stderr)
# 	$2: The exit code (default is 1)
# if env var _PRINT_HELP is set to 'yes', the usage is print to stderr (prior to $1)
# Example:
# 	test -f "$_arg_infile" || _PRINT_HELP=yes die "Can't continue, have to supply file as an argument, got '$_arg_infile'" 4
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


# Function that evaluates whether a value passed to it begins by a character
# that is a short option of an argument the script knows about.
# This is required in order to support getopts-like short options grouping.
begins_with_short_option()
{
	local first_option all_short_options='knph'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_kind="item"
_arg_name=
_arg_path="."


# Function that prints general usage of the script.
# This is useful if users asks for it, or if there is an argument parsing error (unexpected / spurious arguments)
# and it makes sense to remind the user how the script is supposed to be called.
print_help()
{
	printf '%s\n' "Bitwarden solver of ymlex:"
	printf 'Usage: %s [-k|--kind <arg>] [-n|--name <arg>] [-p|--path <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-k, --kind: kind of bitwarden object (default: 'item')"
	printf '\t%s\n' "-n, --name: name of bitwarden object (no default)"
	printf '\t%s\n' "-p, --path: jsonpath of bitwarden object (default: '.')"
	printf '\t%s\n' "-h, --help: Prints help"
}


# The parsing of the command-line
parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			# We support whitespace as a delimiter between option argument and its value.
			# Therefore, we expect the --kind or -k value.
			# so we watch for --kind and -k.
			# Since we know that we got the long or short option,
			# we just reach out for the next argument to get the value.
			-k|--kind)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_kind="$2"
				shift
				;;
			# We support the = as a delimiter between option argument and its value.
			# Therefore, we expect --kind=value, so we watch for --kind=*
			# For whatever we get, we strip '--kind=' using the ${var##--kind=} notation
			# to get the argument value
			--kind=*)
				_arg_kind="${_key##--kind=}"
				;;
			# We support getopts-style short arguments grouping,
			# so as -k accepts value, we allow it to be appended to it, so we watch for -k*
			# and we strip the leading -k from the argument string using the ${var##-k} notation.
			-k*)
				_arg_kind="${_key##-k}"
				;;
			# See the comment of option '--kind' to see what's going on here - principle is the same.
			-n|--name)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_name="$2"
				shift
				;;
			# See the comment of option '--kind=' to see what's going on here - principle is the same.
			--name=*)
				_arg_name="${_key##--name=}"
				;;
			# See the comment of option '-k' to see what's going on here - principle is the same.
			-n*)
				_arg_name="${_key##-n}"
				;;
			# See the comment of option '--kind' to see what's going on here - principle is the same.
			-p|--path)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_path="$2"
				shift
				;;
			# See the comment of option '--kind=' to see what's going on here - principle is the same.
			--path=*)
				_arg_path="${_key##--path=}"
				;;
			# See the comment of option '-k' to see what's going on here - principle is the same.
			-p*)
				_arg_path="${_key##-p}"
				;;
			# The help argurment doesn't accept a value,
			# we expect the --help or -h, so we watch for them.
			-h|--help)
				print_help
				exit 0
				;;
			# We support getopts-style short arguments clustering,
			# so as -h doesn't accept value, other short options may be appended to it, so we watch for -h*.
			# After stripping the leading -h from the argument, we have to make sure
			# that the first character that follows coresponds to a short option.
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

# Now call all the functions defined above that are needed to get the job done
parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

#################
# required env:
# BW_CLIENTID
# BW_PASSWORD
# BW_CLIENTSECRET
#################

# script_full_path=$(dirname "$0")
# BW_SESSION="$(cat "$script_full_path"/bw_session 2>/dev/null)"
# export BW_SESSION
# while ! "$script_full_path/bw" sync 1>/dev/null 2>&1; do
# 	"$script_full_path/bw" login --apikey 1>/dev/null 2>&1
# 	BW_SESSION="$("$script_full_path/bw" unlock --raw --passwordenv BW_PASSWORD)"
# 	export BW_SESSION
# 	echo "$BW_SESSION" > "$script_full_path/bw_session"
# 	sleep 5
# done

# "$script_full_path/bw" get "$_arg_kind" "$_arg_name" 2>/dev/null | jq -r "$_arg_path"
bw get "$_arg_kind" "$_arg_name" 2>/dev/null | jq -r "$_arg_path"

# ] <-- needed because of Argbash
